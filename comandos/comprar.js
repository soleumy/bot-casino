// comandos/comprar.js
import { tienda } from './tiendadata.js';

export default async (sock, m, args, { user, guardarEconomia, jid }) => {
    // La entrada del usuario DEBE ser la clave del √≠tem (ej. "alcohol", "arma-fuego").
    // Unimos los argumentos con un guion bajo y los convertimos a min√∫sculas para coincidir con las claves.
    const itemKeyInput = args.join("-").toLowerCase();

    // Busca el √≠tem en la tienda por su clave (c√≥digo)
    const itemToBuy = tienda.find(item => item.clave === itemKeyInput);

    if (!itemToBuy) {
        return sock.sendMessage(jid, {
            text: '‚ùå *Error de compra:*\n"El c√≥digo de ese art√≠culo no est√° disponible en nuestro cat√°logo. Aseg√∫rate de escribirlo correctamente."\n\n_Puedes ver los art√≠culos disponibles con: *$tienda*_'
        }, { quoted: m });
    }

    // Verificar si el usuario tiene suficiente dinero
    if (user.dinero < itemToBuy.precio) {
        return sock.sendMessage(jid, {
            text: `üí∏ *Fondos insuficientes:*\n"Necesitas üí∞ ${itemToBuy.precio} para adquirir *${itemToBuy.nombre}*. Tu saldo actual es de üí∞ ${user.dinero}."\n\n_Intenta ganar m√°s dinero con: *$trabajar* o *$apostar*_'`
        }, { quoted: m });
    }

    // Verificar si el usuario ya posee una propiedad √∫nica de este tipo (ej. "doble-personaje", "arma-fuego").
    // Asumimos que si un √≠tem otorga una "propiedad" o "arma", no se pueden tener m√∫ltiples.
    // Esta lista debe ser coherente con la l√≥gica de '$usar' para √≠tems que no desaparecen del inventario.
    const itemsUnicosOPropiedades = [
        'favor-adm', 'camaras', 'arma-blanca', 'doble-personaje', 'arma-fuego',
        'veneno-letal', 'inmunidad-muerte', 'salvacion', 'ausencia'
        // Puedes a√±adir m√°s claves aqu√≠ si hay otros √≠tems que se consideran "√∫nicos"
        // y no deber√≠an poder comprarse varias veces si ya se poseen.
    ];

    if (itemsUnicosOPropiedades.includes(itemToBuy.clave)) {
        // Para √≠tems con un contador de usos (como 'camaras', 'inmunidad-muerte', 'salvacion'),
        // se deber√≠a verificar si el usuario ya tiene la funcionalidad activa o usos restantes.
        // Por ahora, solo verificamos si ya tienen el √≠tem en el inventario.
        if (user.inventario.includes(itemToBuy.clave)) {
            return sock.sendMessage(jid, {
                text: `‚õî *Art√≠culo ya pose√≠do:*\n"Ya tienes *${itemToBuy.nombre}* (${itemToBuy.clave}) en tu inventario. No puedes adquirir otro de este tipo."`
            }, { quoted: m });
        }
    }


    // Realizar la compra
    user.dinero -= itemToBuy.precio;
    user.inventario.push(itemToBuy.clave); // ¬°IMPORTANTE! A√±ade la CLAVE del √≠tem al inventario.

    // Marcar cambios para guardar la econom√≠a
    guardarEconomia();

    return sock.sendMessage(jid, {
        text: `‚úì  ¬°Compra exitosa!\nHas adquirido *${itemToBuy.nombre}* por üí∞ ${itemToBuy.precio} monedas. ¬°Ahora es tuyo!\n\n_Puedes ver tus posesiones con: *$inventario*_'`
    }, { quoted: m });
};